### How to connect to kubernetes cluster 

$ kubectl config view
apiVersion: v1
clusters: null
contexts: null
current-context: ""
kind: Config
preferences: {}
users: null

$ kubectl config current-context
error: current-context is not set

Install aws cli If not Installed
$ aws configure (Set the credentials)
$  ~/.aws/credentials

$ aws eks update-kubeconfig --region ap-south-1 --name my-eks-cluster
Added new context arn:aws:eks:ap-south-1:536697270232:cluster/my-eks-cluster to /home/ubuntu/.kube/config
ubunt

~$ kubectl config view
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: DATA+OMITTED
    server: https://C2240393F383F92AEE739A397F0C5668.gr7.ap-south-1.eks.amazonaws.com
  name: arn:aws:eks:ap-south-1:536697270232:cluster/my-eks-cluster
contexts:
- context:
    cluster: arn:aws:eks:ap-south-1:536697270232:cluster/my-eks-cluster
    user: arn:aws:eks:ap-south-1:536697270232:cluster/my-eks-cluster
  name: arn:aws:eks:ap-south-1:536697270232:cluster/my-eks-cluster
current-context: arn:aws:eks:ap-south-1:536697270232:cluster/my-eks-cluster
kind: Config
preferences: {}
users:
- name: arn:aws:eks:ap-south-1:536697270232:cluster/my-eks-cluster
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1beta1
      args:
      - --region
      - ap-south-1
      - eks
      - get-token
      - --cluster-name
      - my-eks-cluster
      - --output
      - json
      command: aws
      env: null
      interactiveMode: IfAvailable
      provideClusterInfo: false

$ kubectl config current-context
arn:aws:eks:ap-south-1:536697270232:cluster/my-eks-cluster

$ kubectl get nodes
NAME                                        STATUS   ROLES    AGE   VERSION
ip-10-0-1-203.ap-south-1.compute.internal   Ready    <none>   25m   v1.30.14-eks-3abbec1
ip-10-0-3-105.ap-south-1.compute.internal   Ready    <none>   25m   v1.30.14-eks-3abbec1

DEPLOY PROJECT IN KUBERNETES
+++++++++++++++++++++++++++++++++

$ kubectl config current-context
arn:aws:eks:ap-south-1:536697270232:cluster/my-eks-cluster

$ kubectl get all
NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
service/kubernetes   ClusterIP   172.20.0.1   <none>        443/TCP   120m


$ cd ultimate-devops-project-demo/
$ cd kubernetes/
$ ls -l
total 144
drwxrwxr-x 2 ubuntu ubuntu  4096 Aug 15 16:10 accounting
drwxrwxr-x 2 ubuntu ubuntu  4096 Aug 15 16:10 ad
drwxrwxr-x 2 ubuntu ubuntu  4096 Aug 15 16:10 cart
drwxrwxr-x 2 ubuntu ubuntu  4096 Aug 15 16:10 checkout
-rw-rw-r-- 1 ubuntu ubuntu 62517 Aug 15 16:10 complete-deploy.yaml
drwxrwxr-x 2 ubuntu ubuntu  4096 Aug 15 16:10 currency
drwxrwxr-x 2 ubuntu ubuntu  4096 Aug 15 16:10 email
drwxrwxr-x 2 ubuntu ubuntu  4096 Aug 15 16:10 flagd
drwxrwxr-x 2 ubuntu ubuntu  4096 Aug 15 16:10 frauddetection
drwxrwxr-x 2 ubuntu ubuntu  4096 Aug 15 16:10 frontend
drwxrwxr-x 2 ubuntu ubuntu  4096 Aug 15 16:10 frontendproxy
drwxrwxr-x 2 ubuntu ubuntu  4096 Aug 15 16:10 imageprovider
drwxrwxr-x 2 ubuntu ubuntu  4096 Aug 15 16:10 kafka
drwxrwxr-x 2 ubuntu ubuntu  4096 Aug 15 16:10 loadgenerator
drwxrwxr-x 2 ubuntu ubuntu  4096 Aug 15 16:10 payment
drwxrwxr-x 2 ubuntu ubuntu  4096 Aug 15 16:10 productcatalog
drwxrwxr-x 2 ubuntu ubuntu  4096 Aug 15 16:10 quote
drwxrwxr-x 2 ubuntu ubuntu  4096 Aug 15 16:10 recommendation
-rw-rw-r-- 1 ubuntu ubuntu   322 Aug 15 16:10 serviceaccount.yaml
drwxrwxr-x 2 ubuntu ubuntu  4096 Aug 15 16:10 shipping
drwxrwxr-x 2 ubuntu ubuntu  4096 Aug 15 16:10 valkey

$ kubectl apply -f serviceaccount.yaml
serviceaccount/opentelemetry-demo created

$ kubectl get sa
NAME                 SECRETS   AGE
default              0         123m
opentelemetry-demo   0         25s

$ kubectl apply -f complete-deploy.yaml

$ kubectl get pods

$ kubectl get svc | grep frontendproxy
opentelemetry-demo-frontendproxy           ClusterIP   172.20.94.131    <none>        8080/TCP            2m22s

Cant access frontendproxy as we are using ClusterIP Here 
$ kubectl get svc | grep frontendproxy
opentelemetry-demo-frontendproxy           ClusterIP   172.20.94.131    <none>        8080/TCP            25m

Edit ClusterIp to LoadBalancer:

$ kubectl edit svc opentelemetry-demo-frontendproxy
service/opentelemetry-demo-frontendproxy edited

Created LoadBalancer(Load balancer type- Classic)(It will be created Automatically)
$ kubectl get svc opentelemetry-demo-frontendproxy
NAME                               TYPE           CLUSTER-IP      EXTERNAL-IP                                                                PORT(S)          AGE
opentelemetry-demo-frontendproxy   LoadBalancer   172.20.94.131   a73f5f5ce9b944d48b39b68bdc01dfe5-1465237507.ap-south-1.elb.amazonaws.com   8080:32361/TCP   28m

# Download and extract the latest release of eksctl
curl --silent --location "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp

# Move the extracted binary to /usr/local/bin
sudo mv /tmp/eksctl /usr/local/bin

# Verify the installation
eksctl version

$ kubectl config current-context
arn:aws:eks:ap-south-1:536697270232:cluster/my-eks-cluster

Now follow Above file 14-Kubernetes-ingress-controller.md
OR FOLLOW BELOW

Configue ALB Ingress controller in EKS cluster

$ export cluster_name=my-eks-cluster

$ oidc_id=$(aws eks describe-cluster --name $cluster_name --query "cluster.identity.oidc.issuer" --output text | cut -d '/' -f 5)

$ echo $oidc_id
C2240393F383F92AEE739A397F0C5668

Associate OIDC ID with our EKS cluster
$ eksctl utils associate-iam-oidc-provider --cluster $cluster_name --approve
2025-08-16 11:47:32 [ℹ]  will create IAM Open ID Connect provider for cluster "my-eks-cluster" in "ap-south-1"
2025-08-16 11:47:32 [✔]  created IAM Open ID Connect provider for cluster "my-eks-cluster" in "ap-south-1"

# Download IAM Policy
$ curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.11.0/docs/install/iam_policy.json
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  8759  100  8759    0     0  31950      0 --:--:-- --:--:-- --:--:-- 31967
ubuntu@ip-172-31-45-58:~$ ls -l
total 119308
drwxr-xr-x  3 ubuntu ubuntu     4096 Aug 15 18:12 aws
-rw-rw-r--  1 ubuntu ubuntu 61993687 Aug 16 05:45 awscliv2.zip
drwxrwxr-x  2 ubuntu ubuntu     4096 Aug 16 05:44 eks
drwxrwxr-x  3 ubuntu ubuntu     4096 Aug 15 16:55 go
-rw-rw-r--  1 ubuntu ubuntu     8759 Aug 16 11:50 iam_policy.json
-rw-rw-r--  1 ubuntu ubuntu 60129464 Aug 15 14:14 kubectl
-rw-rw-r--  1 ubuntu ubuntu       64 Aug 15 14:14 kubectl.sha256
drwxrwxr-x 14 ubuntu ubuntu     4096 Aug 16 06:17 ultimate-devops-project-aws
drwxrwxr-x  9 ubuntu ubuntu     4096 Aug 15 16:10 ultimate-devops-project-demo

# Create IAM policy on AWS account
$ aws iam create-policy \
    --policy-name AWSLoadBalancerControllerIAMPolicy \
    --policy-document file://iam_policy.json

# Create iamserviceacoout and mapping that to Role
eksctl create iamserviceaccount \
  --cluster=<your-cluster-name> \
  --namespace=kube-system \
  --name=aws-load-balancer-controller \
  --role-name AmazonEKSLoadBalancerControllerRole \
  --attach-policy-arn=arn:aws:iam::<your-aws-account-id>:policy/AWSLoadBalancerControllerIAMPolicy \
  --approve

If getting below error:
2025-08-16 12:01:16 [ℹ]  1 iamserviceaccount (kube-system/aws-load-balancer-controller) was included (based on the include/exclude rules)
2025-08-16 12:01:16 [!]  serviceaccounts that exist in Kubernetes will be excluded, use --override-existing-serviceaccounts to override

USE BELOW COMMAND 

eksctl create iamserviceaccount \
  --cluster=<your-cluster-name> \
  --namespace=kube-system \
  --name=aws-load-balancer-controller \
  --role-name AmazonEKSLoadBalancerControllerRole \
  --attach-policy-arn=arn:aws:iam::<your-aws-account-id>:policy/AWSLoadBalancerControllerIAMPolicy \
  --approve --override-existing-serviceaccounts

Replace <your-cluster-name> and <your-aws-account-id> in command

# Install Helm
$ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
$ chmod 700 get_helm.sh
$ ./get_helm.sh
$ helm version

# Add helm repo

$ helm repo add eks https://aws.github.io/eks-charts

# Update the repo
$ helm repo update eks

# Install aws-load-balancer-controller

$ helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=<your-cluster-name> --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller --set region=<region> --set vpcId=<your-vpc-id>
helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=my-eks-cluster --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller --set region=ap-south-1 --set vpcId=vpc-0290efc54d2044124 

$ kubectl get pods -n kube-system

Go to the front-endproxy microservice

$ kubectl edit svc opentelmetry-demo-frontendproxy
Change to ClusterIP

cd frontendproxy
create ingress.yaml file 

$ kubectl apply -f ingress.yaml

$ kubectl get ingress

$ kubectl get pods -n kube-system

aws-load-balancer-controller-986t677767d-f332v
aws-load-balancer-controller-areg6t6fs7d-dh65v 

$ kubectl logs aws-load-balancer-controller-986t677767d-f332v -n kube-system

Acces by using Load Balancer DNS (Will not work)

Access by example.com (Configure local machine DNS record to make it work)

